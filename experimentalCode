#include <bits/stdc++.h>
#include <ctype.h>

using namespace std;

string strings[100];
string tokenizedWords[100];

void storeStrings()
{
    fstream f;
    string s;
    int i = 0;
    
    f.open("read.txt");
    while(getline(f,s,' '))
    {
        strings[i] = s;
        i++;
    }
}

int lenStringArray(string str[])
{
    size_t i = 0;
    while (!str[i].empty())
        ++i;

return i;
}

int split(string str, char seperator)
{
    int currentIndex = 0, i = 0;
    int startIndex = 0, endIndex = 0;
    while (i <= str.size())
    {
        if (str[i] == seperator || i == str.size())
        {
            endIndex = i;
            string subStr = "";
            subStr.append(str, startIndex, endIndex - startIndex);
            strings[currentIndex] = subStr;
            currentIndex += 1;
            startIndex = endIndex + 1;
        }
        i++;
    }
    return currentIndex;
}

void tokeniser() 
{

    char ch;
    string tp;
    
    int k = 0;

    for (int i = 0; i < lenStringArray(strings); i++)
    {
        char* updatedStr = new char[15];
        string str1 = "à§·";
        size_t found = strings[i].find(str1);
        
        //replaces dari if found
        if (found != string::npos)
            {
                strings[i].replace(found, 3, "#");
                cout << strings[i] << endl;
            }
        
        //looks for punctuations in string, if not punctuation, stores it 
        int id = 0;
        for (int j = 0; j < strings[i].size(); j++)
        {
            if (!ispunct(strings[i][j]) && strings[i][j]!='#')
                updatedStr[id++] = strings[i][j];
        }
        
        for(int j = 0; j < id; j++) 
        {
            tokenizedWords[k].push_back(updatedStr[j]);
        }
            
        cout << "tokenized words: "  << tokenizedWords[k] << endl;
        k ++;
    }

}

int main()
{
    storeStrings();
    tokeniser();
}