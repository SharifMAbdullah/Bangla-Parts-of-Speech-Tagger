#include <iostream>
#include <ctype.h>
#include <string>
#include <fstream>
using namespace std;
#define N 1000

string strings[N];
string tokenizedWords[N];


void storeStrings()
{
    fstream f;
    string s;
    int i = 0;
    
    f.open("read.txt");
    while(getline(f,s,' '))
    {
        strings[i] = s;
        i++;
    }
f.close();
}

int lenStringArray(string str[])
{
    size_t i = 0;
    while (!str[i].empty())
        ++i;

return i;
}

void stopWordRemover()
{
    string temp;
    fstream f1,f2;
    f1.open("stop_words.txt");
    f2.open("write2.txt");
    int n = lenStringArray(strings);
    while(getline(f1,temp))
    {
        for(long int i=0; i<lenStringArray(tokenizedWords); i++)
            {
                if(tokenizedWords[i].compare(temp)==0)
                tokenizedWords[i].erase();
            }
    }
    
    for(long int i=0; i<lenStringArray(tokenizedWords); i++)
    f2 << tokenizedWords[i] << endl;
    f1.close();
    f2.close();
}

int split(string str, char seperator)
{
    int currentIndex = 0, i = 0;
    int startIndex = 0, endIndex = 0;
    while (i <= str.size())
    {
        if (str[i] == seperator || i == str.size())
        {
            endIndex = i;
            string subStr = "";
            subStr.append(str, startIndex, endIndex - startIndex);
            strings[currentIndex] = subStr;
            currentIndex += 1;
            startIndex = endIndex + 1;
        }
        i++;
    }
    return currentIndex;
}

void tokeniser() 
{

    fstream f,s;
    f.open("a.txt");
    s.open("b.txt");
    int k = 0;

    for (int i = 0; i < lenStringArray(strings); i++)
    {
         f << "current input: "  << strings[i] << endl;
        char* updatedStr = new char[N];
        cout<<"ok1\n";
        string substr = "ред";
        fflush(stdin);
        int found = strings[i].find(substr);
        
        s<<i<<" "<<found<<endl;
        cout<<"ok2\n";
        
        if(found != string::npos)
        strings[i].replace(found,3,"#");
        else cout << "NOT FOUND!" << endl;
        
        //looks for punctuations in string, if not punctuation, stores it 
        int id = 0;
        for (int j = 0; j < strings[i].size(); j++)
        {
            if (!ispunct(strings[i][j]) && strings[i][j]!='#')
                updatedStr[id++] = strings[i][j];
        }
        
        for(int j = 0; j < id; j++) 
            tokenizedWords[k].push_back(updatedStr[j]);
            
        f << "tokenized words: "  << tokenizedWords[k] << endl;
        k++;
    }
    
f.close();
}

int main()
{
    storeStrings();
    tokeniser();
    stopWordRemover();
}
